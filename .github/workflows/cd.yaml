name: Continuous Delivery Pipeline

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - uses: ./.github/actions/npminstall

      - name: Prettier
        run: npx prettier --check .

      - name: Typescript
        run: npx tsc --noEmit

  unit-tests:
    services:
      mysql:
        image: mysql:5.6
        env:
          MYSQL_ROOT_PASSWORD: realworld
          MYSQL_DATABASE: realworld
          MYSQL_USER: realworld
          MYSQL_PASSWORD: realworld
        ports:
          - '3306:3306'
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - uses: ./.github/actions/npminstall

      - run: npm run test:unit
        shell: bash

  server-tests:
    needs: [unit-tests, lint]
    services:
      mysql:
        image: mysql:5.6
        env:
          MYSQL_ROOT_PASSWORD: realworld
          MYSQL_DATABASE: realworld
          MYSQL_USER: realworld
          MYSQL_PASSWORD: realworld
        ports:
          - '3306:3306'
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - uses: ./.github/actions/npminstall

      - name: Starting localhost server
        shell: sh
        run: |
          ./scripts/package.sh
          nohup node dist/server &
          ./scripts/wait_for_status.sh http://localhost:3000/api/checks/readiness 200

      - name: Running acceptance tests on localhost server
        run: API_URL=http://localhost:3000/api npx jest acceptance

  docker-tests:
    needs: [unit-tests, lint]
    services:
      mysql:
        image: mysql:5.6
        env:
          MYSQL_ROOT_PASSWORD: realworld
          MYSQL_DATABASE: realworld
          MYSQL_USER: realworld
          MYSQL_PASSWORD: realworld
        ports:
          - '3306:3306'
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: docker/setup-buildx-action@v2

      - name: Build docker image
        uses: docker/build-push-action@v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          push: false
          tags: 'app'

      - name: Starting docker server
        shell: sh
        run: |
          nohup docker run --rm --network=host --env API_PORT=3001 app &
          ./scripts/wait_for_status.sh http://localhost:3001/api/checks/readiness 200

      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - uses: ./.github/actions/npminstall

      - name: Running acceptance tests on docker server
        run: API_URL=http://localhost:3001/api npx jest acceptance

  deploy:
    needs: [docker-tests, server-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/credentials
      - uses: hashicorp/setup-terraform@v1
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - uses: ./.github/actions/npminstall

      - run: ./scripts/ziplambda.sh

      - working-directory: ./terraform/lambda
        id: terraform
        run: |
          terraform apply --auto-aprove
          echo "API_URL=$(terraform output API_URL)" >> $GITHUB_OUTPUT

      - uses: actions/github-script@v6
        with:
          script: |
            core.notice('Check URL ${{ steps.terraform.outputs.API_URL }}')

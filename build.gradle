//
//  Gradle 7.2 Version
//
plugins {
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'io.freefair.lombok' version "6.2.0"  // Lombok Gradle용 플러그인을 사용하는 설정
}



group = 'pw.wlz.realworld'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'


    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2:1.4.200'


    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-inline:3.9.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // 테스트 구동 후 항상 리포트를 생성함.

    jacoco { // Test 작업의 JaCoCo 특정 속성을 구성함. 태스크 확장 기본값
        enabled = true
//        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
//        includes = []
//        excludes = []
//        excludeClassLoaders = []
//        includeNoLocationClasses = false
//        sessionId = "<auto-generated value>"
//        dumpOnExit = true
//        classDumpDir = null  //layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
//        output = JacocoTaskExtension.Output.FILE
//        address = "localhost"
//        port = 6300
//        jmx = false
    }
}

lombok { // 롬복 설정
    version = "1.18.20"
}


jacoco {  // JaCoCo 기본 빌드 구성

    // JaCoCo 버전
    toolVersion = "0.8.7"

    // 디폴트 리포트 디렉토리는 $buildDir/reports/jacoco
    //reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport { // 테스트 리포트 결과에 대한 옵션

    dependsOn test // 리포트 생성 전 테스트 구동에 의존함

    reports { // 리포트 결과 enabled/disabled 설정
        html.required = true
        xml.enabled false
        csv.enabled false
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification { // 코드 커버리지 측정항목 및 규칙

    //범위는 전체 프로젝트, 개별 파일 및 특정 JaCoCo 특정 유형
    // (예: 적용되는 라인 또는 적용되는 분기)에 대해 지정 가능

    // 커버리지 기준을 설정하는 룰 정의
    violationRules {

        rule {

            rule {
                element = 'CLASS'
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.20
                }
            }

            // element : 코드 커버리지 체크 기준
            // -- 룰에 'element' 항목이 없으면 프로젝트 전체 파일에 대한 기준 (BUNDLE)
            // -- element 종류 (BUNDLE, PACKAGE, CLASS, SOURCEFILE or METHOD)
            // -- * BUNDLE(default): 패키지 번들
            // -- * PACKAGE: 패키지
            // -- * CLASS: 클래스
            // -- * SOURCEFILE: 소스파일
            // -- * METHOD: 메소드

            // JacocoLimit 설정항목 https://www.eclemma.org/jacoco/trunk/doc/counters.html
            // * counter : 코드 커버리지를 측정할 때 사용하는 지표
            // * -- * INSTRUCTION (C0 Coverage, default) - Java 바이트 코드 명령 수. Java bytecode instructions. 실행 되었거나 실행되지 않은 코드의 양에 대한 정보
            // * -- * BRANCH(C1 Coverage): 조건문 등의 분기 수. 실행 되었거나 실행 되지 않은 분기 수 판별
            // * -- * COMPLEXITY: 순환복잡도계산. v(G) = B - D + 1 (B:브랜치 수, D: Decision Point)
            // * -- * LINE: 빈 줄을 제외한 실제 코드의 라인 수. 라인에 지정된 하나 이상의 instruction이 실행 될때 실행 된 것으로 간주
            // * -- * CLASS: 클래스 수. 클래스 내 하나 이상의 메소드가 실행될 때 실행 된 것으로 간주
            // * -- * METHOD: 메소드 수. 각각의 non-abstract 메소드에는 하나 이상의 instruction 포함
            // * value : 코드 커버리지를 측정할 때 사용하는 지표
            // * -- * TOTALCOUNT: 전체 개수
            // * -- * MISSEDCOUNT: 커버되지 않은 개수
            // * -- * COVEREDCOUNT: 커버된 개수
            // * -- * MISSEDRATIO: 커버되지 않은 비율. 0(=0%)부터 1(=100%) 사이의 숫자
            // * -- * COVEREDRATIO (default): 커버된 비율. 0(=0%)부터 1(=100%) 사이의 숫자
            // * maximum: 최대 예상 값
            // * minimum: 최저 예상 값

            limit {
                minimum = 0.2
            }

            // 커버리지 체크를 제외할 클래스 설정
            excludes = [
                    // '*.test.*' // 이처럼 와일드 카드 (*, ?)를 사용 가능
            ];
        }

    }
}

// 커스텀 테스크 생성해보기
task runJaCoCo(type: Test) {
    group = 'verification'
    description = 'Execute the JaCoCo coverage verification after verifying the unit tests and generating JaCoCo Report.'
    dependsOn(':test', ':jacocoTestReport', ':jacocoTestCoverageVerification')
    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}
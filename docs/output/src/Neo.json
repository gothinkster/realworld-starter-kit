{"classData":[{"comment":"/**\n * The base module to enhance classes, create instances and the Neo namespace\n * @module Neo\n * @singleton\n * @borrows Neo.core.Util.capitalize        as capitalize\n * @borrows Neo.core.Util.createStyleObject as createStyleObject\n * @borrows Neo.core.Util.createStyles      as createStyles\n * @borrows Neo.core.Util.decamel           as decamel\n * @borrows Neo.core.Util.isArray           as isArray\n * @borrows Neo.core.Util.isBoolean         as isBoolean\n * @borrows Neo.core.Util.isDefined         as isDefined\n * @borrows Neo.core.Util.isNumber          as isNumber\n * @borrows Neo.core.Util.isObject          as isObject\n * @borrows Neo.core.Util.isString          as isString\n * @borrows Neo.core.Util.toArray           as toArray\n * @tutorial 01_Concept\n */","meta":{"filename":"Neo.mjs","lineno":6,"columnno":0,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{}},"description":"The base module to enhance classes, create instances and the Neo namespace","kind":"module","name":"Neo","tags":[{"originalTitle":"singleton","title":"singleton","text":""},{"originalTitle":"tutorial","title":"tutorial","text":"01_Concept","value":"01_Concept"}],"longname":"module:Neo","$longname":"Neo","$kind":"module","id":2362,"neoClassName":"Neo"},{"comment":"/**\n     * A map containing ntypes as key and Neo classes or singletons as values\n     * @memberOf! module:Neo\n     * @protected\n     * @type Object\n     */","meta":{"range":[1138,1150],"filename":"Neo.mjs","lineno":38,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100073438","name":"ntypeMap","type":"ObjectExpression","value":"{}"}},"description":"A map containing ntypes as key and Neo classes or singletons as values","memberof":"module:Neo","access":"protected","type":{"names":["Object"]},"name":"ntypeMap","longname":"module:Neo.ntypeMap","kind":"member","scope":"static","$longname":"Neo.ntypeMap","$kind":"property","id":2363,"neoClassName":"Neo"},{"comment":"/**\n     * Needed for Neo.create. False for the main thread, true for the App, Data & Vdom worker\n     * @memberOf! module:Neo\n     * @protected\n     * @type Boolean\n     */","meta":{"range":[1334,1441],"filename":"Neo.mjs","lineno":45,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100073440","name":"insideWorker","type":"LogicalExpression","value":""}},"description":"Needed for Neo.create. False for the main thread, true for the App, Data & Vdom worker","memberof":"module:Neo","access":"protected","type":{"names":["Boolean"]},"name":"insideWorker","longname":"module:Neo.insideWorker","kind":"member","scope":"static","$longname":"Neo.insideWorker","$kind":"property","id":2364,"neoClassName":"Neo"},{"comment":"/**\n     * Internally used at the end of each class / module definition\n     * @memberOf module:Neo\n     * @param {Neo.core.Base} cls The Neo class to apply configs to\n     * @protected\n     * @tutorial 02_ClassSystem\n     */","meta":{"range":[1678,4924],"filename":"Neo.mjs","lineno":48,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100073450","name":"applyClassConfig","type":"FunctionExpression"},"vars":{"baseCfg":"module:Neo~baseCfg","baseStaticCfg":"module:Neo~baseStaticCfg","proto":"module:Neo~proto","protos":"module:Neo.applyClassConfig~protos","config":"module:Neo~config","ctor":"module:Neo~ctor","staticConfig":"module:Neo~staticConfig","":null}},"description":"Internally used at the end of each class / module definition","memberof":"module:Neo","params":[{"type":{"names":["Neo.core.Base"]},"description":"The Neo class to apply configs to","name":"cls"}],"access":"protected","tags":[{"originalTitle":"tutorial","title":"tutorial","text":"02_ClassSystem","value":"02_ClassSystem"}],"name":"applyClassConfig","longname":"module:Neo.applyClassConfig","kind":"function","scope":"static","$longname":"Neo.applyClassConfig","$kind":"method","id":2365,"neoClassName":"Neo"},{"comment":"/**\n     * Maps methods from one namespace to another one\n     * @example\n     * // aliases\n     * Neo.applyFromNs(Neo, Util, {\n     *     createStyleObject: 'createStyleObject',\n     *     createStyles     : 'createStyles',\n     *     capitalize       : 'capitalize',\n     *     decamel          : 'decamel',\n     *     isArray          : 'isArray',\n     *     isBoolean        : 'isBoolean',\n     *     isDefined        : 'isDefined',\n     *     isNumber         : 'isNumber',\n     *     isObject         : 'isObject',\n     *     isString         : 'isString',\n     *     toArray          : 'toArray'\n     * }, true);\n     *\n     * // e.g. Neo.core.Util.isObject => Neo.isObject\n     * @memberOf module:Neo\n     * @param {Neo|Neo.core.Base} target The target class or singleton Instance or Neo\n     * @param {Neo.core.Base} namespace The class containing the methods\n     * @param {Object} config\n     * @param {Boolean} [bind] set this to true in case you want to bind methods to the \"from\" namespace\n     * @returns {Object} target\n     */","meta":{"range":[5979,6340],"filename":"Neo.mjs","lineno":170,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100073844","name":"applyFromNs","type":"FunctionExpression"},"vars":{"fnName":"module:Neo.applyFromNs~fnName","":null}},"description":"Maps methods from one namespace to another one","examples":["// aliases\nNeo.applyFromNs(Neo, Util, {\n    createStyleObject: 'createStyleObject',\n    createStyles     : 'createStyles',\n    capitalize       : 'capitalize',\n    decamel          : 'decamel',\n    isArray          : 'isArray',\n    isBoolean        : 'isBoolean',\n    isDefined        : 'isDefined',\n    isNumber         : 'isNumber',\n    isObject         : 'isObject',\n    isString         : 'isString',\n    toArray          : 'toArray'\n}, true);\n\n// e.g. Neo.core.Util.isObject => Neo.isObject"],"memberof":"module:Neo","params":[{"type":{"names":["Neo","Neo.core.Base"]},"description":"The target class or singleton Instance or Neo","name":"target"},{"type":{"names":["Neo.core.Base"]},"description":"The class containing the methods","name":"namespace"},{"type":{"names":["Object"]},"name":"config"},{"type":{"names":["Boolean"]},"optional":true,"description":"set this to true in case you want to bind methods to the \"from\" namespace","name":"bind"}],"returns":[{"type":{"names":["Object"]},"description":"target"}],"name":"applyFromNs","longname":"module:Neo.applyFromNs","kind":"function","scope":"static","$longname":"Neo.applyFromNs","$kind":"method","id":2366,"neoClassName":"Neo"},{"comment":"/**\n     * Maps a class to the global Neo or App namespace.\n     * Can get called for classes and singleton instances\n     * @memberOf module:Neo\n     * @param {Neo.core.Base} cls\n     */","meta":{"range":[6539,6984],"filename":"Neo.mjs","lineno":189,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100073897","name":"applyToGlobalNs","type":"FunctionExpression"},"vars":{"proto":"module:Neo.applyToGlobalNs~proto","className":"module:Neo~className","nsArray":"module:Neo~nsArray","key":"module:Neo~key","ns":"module:Neo~ns","ns[undefined]":"module:Neo~ns.undefined]"}},"description":"Maps a class to the global Neo or App namespace.<br />Can get called for classes and singleton instances","memberof":"module:Neo","params":[{"type":{"names":["Neo.core.Base"]},"name":"cls"}],"name":"applyToGlobalNs","longname":"module:Neo.applyToGlobalNs","kind":"function","scope":"static","$longname":"Neo.applyToGlobalNs","$kind":"method","id":2367,"neoClassName":"Neo"},{"comment":"/**\n     * Copies all keys of defaults into target, in case they don't already exist\n     * @memberOf module:Neo\n     * @param {Object} target The target object\n     * @param {Object} defaults The object containing the keys you want to copy\n     * @returns {Object} target\n     */","meta":{"range":[7276,7607],"filename":"Neo.mjs","lineno":210,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100073975","name":"assignDefaults","type":"FunctionExpression"},"vars":{"":null}},"description":"Copies all keys of defaults into target, in case they don't already exist","memberof":"module:Neo","params":[{"type":{"names":["Object"]},"description":"The target object","name":"target"},{"type":{"names":["Object"]},"description":"The object containing the keys you want to copy","name":"defaults"}],"returns":[{"type":{"names":["Object"]},"description":"target"}],"name":"assignDefaults","longname":"module:Neo.assignDefaults","kind":"function","scope":"static","$longname":"Neo.assignDefaults","$kind":"method","id":2368,"neoClassName":"Neo"},{"comment":"/**\n     * @memberOf module:Neo\n     * @param {Object|Array|*} obj\n     * @param {Boolean} [deep=false] Set this to true in case you want to clone nested objects as well\n     * @param {Boolean} [ignoreNeoInstances=false] returns existing instances if set to true\n     * @returns {Object|Array|*} the cloned input\n     */","meta":{"range":[7939,8962],"filename":"Neo.mjs","lineno":229,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100074018","name":"clone","type":"FunctionExpression"},"vars":{"out":"module:Neo~out","":null,"obj":"module:Neo~obj"}},"memberof":"module:Neo","params":[{"type":{"names":["Object","Array","*"]},"name":"obj"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"Set this to true in case you want to clone nested objects as well","name":"deep"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"returns existing instances if set to true","name":"ignoreNeoInstances"}],"returns":[{"type":{"names":["Object","Array","*"]},"description":"the cloned input"}],"name":"clone","longname":"module:Neo.clone","kind":"function","scope":"static","$longname":"Neo.clone","$kind":"method","id":2369,"neoClassName":"Neo"},{"comment":"/**\n     * Creates a new instance using the originalConfig without the id\n     * @memberOf module:Neo\n     * @param {Neo.core.Base} instance\n     * @returns {Neo.core.Base} the cloned instance\n     */","meta":{"range":[9174,9369],"filename":"Neo.mjs","lineno":265,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100074165","name":"cloneNeoInstance","type":"FunctionExpression"},"vars":{"config":"module:Neo.cloneNeoInstance~config"}},"description":"Creates a new instance using the originalConfig without the id","memberof":"module:Neo","params":[{"type":{"names":["Neo.core.Base"]},"name":"instance"}],"returns":[{"type":{"names":["Neo.core.Base"]},"description":"the cloned instance"}],"name":"cloneNeoInstance","longname":"module:Neo.cloneNeoInstance","kind":"function","scope":"static","$longname":"Neo.cloneNeoInstance","$kind":"method","id":2370,"neoClassName":"Neo"},{"comment":"/**\n     * Use Neo.create() instead of \"new\" to create instances of all Neo classes\n     * @example\n     * import Button from '../button/Base.mjs';\n     *\n     * Neo.create(Button, {\n     *     iconCls: 'fa fa-home',\n     *     text   : 'Home'\n     * });\n     * @example\n     * import Button from '../button/Base.mjs';\n     *\n     * Neo.create({\n     *     module : Button,\n     *     iconCls: 'fa fa-home',\n     *     text   : 'Home'\n     * });\n     * @example\n     * Neo.create('Neo.button.Base' {\n     *     iconCls: 'fa fa-home',\n     *     text   : 'Home'\n     * });\n     * @example\n     * Neo.create({\n     *     className: 'Neo.button.Base',\n     *     iconCls  : 'fa fa-home',\n     *     text     : 'Home'\n     * });\n     * @memberOf module:Neo\n     * @param {String|Object|Neo.core.Base} className\n     * @param {Object} [config]\n     * @returns {Neo.core.Base|null} The new class instance\n     * @tutorial 02_ClassSystem\n     */","meta":{"range":[10319,11371],"filename":"Neo.mjs","lineno":308,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100074196","name":"create","type":"FunctionExpression"},"vars":{"cls":"module:Neo~cls","instance":"module:Neo~instance","config":"module:Neo~config","className":"module:Neo~className"}},"description":"Use Neo.create() instead of \"new\" to create instances of all Neo classes","examples":["import Button from '../button/Base.mjs';\n\nNeo.create(Button, {\n    iconCls: 'fa fa-home',\n    text   : 'Home'\n});","import Button from '../button/Base.mjs';\n\nNeo.create({\n    module : Button,\n    iconCls: 'fa fa-home',\n    text   : 'Home'\n});","Neo.create('Neo.button.Base' {\n    iconCls: 'fa fa-home',\n    text   : 'Home'\n});","Neo.create({\n    className: 'Neo.button.Base',\n    iconCls  : 'fa fa-home',\n    text     : 'Home'\n});"],"memberof":"module:Neo","params":[{"type":{"names":["String","Object","Neo.core.Base"]},"name":"className"},{"type":{"names":["Object"]},"optional":true,"name":"config"}],"returns":[{"type":{"names":["Neo.core.Base","null"]},"description":"The new class instance"}],"tags":[{"originalTitle":"tutorial","title":"tutorial","text":"02_ClassSystem","value":"02_ClassSystem"}],"name":"create","longname":"module:Neo.create","kind":"function","scope":"static","$longname":"Neo.create","$kind":"method","id":2371,"neoClassName":"Neo"},{"comment":"/**\n     * Maps a className string into a global namespace\n     * @example\n     * Neo.ns('Neo.button.Base', true);\n     * // =>\n     * // self.Neo = self.Neo || {};\n     * // self.Neo.component = self.Neo.component || {};\n     * // self.Neo.button.Base = self.Neo.button.Base || {};\n     * // return self.Neo.button.Base;\n     *\n     * @memberOf module:Neo\n     * @param {Array|String} names The class name string containing dots or an Array of the string parts\n     * @param {Boolean} [create] Set create to true to create empty objects for non existing parts\n     * @param {Object} [scope] Set a different starting point as self\n     * @returns {Object} reference to the toplevel namespace\n     */","meta":{"range":[12101,12445],"filename":"Neo.mjs","lineno":360,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100074318","name":"ns","type":"FunctionExpression"},"vars":{"names":"module:Neo~names","":null}},"description":"Maps a className string into a global namespace","examples":["Neo.ns('Neo.button.Base', true);\n// =>\n// self.Neo = self.Neo || {};\n// self.Neo.component = self.Neo.component || {};\n// self.Neo.button.Base = self.Neo.button.Base || {};\n// return self.Neo.button.Base;"],"memberof":"module:Neo","params":[{"type":{"names":["Array","String"]},"description":"The class name string containing dots or an Array of the string parts","name":"names"},{"type":{"names":["Boolean"]},"optional":true,"description":"Set create to true to create empty objects for non existing parts","name":"create"},{"type":{"names":["Object"]},"optional":true,"description":"Set a different starting point as self","name":"scope"}],"returns":[{"type":{"names":["Object"]},"description":"reference to the toplevel namespace"}],"name":"ns","longname":"module:Neo.ns","kind":"function","scope":"static","$longname":"Neo.ns","$kind":"method","id":2372,"neoClassName":"Neo"},{"comment":"/**\n     * Creates instances of Neo classes using their ntype instead of the class name\n     * @example\n     * Neo.ntype('button' {\n     *     iconCls: 'fa fa-home',\n     *     text   : 'Home'\n     * });\n     * @example\n     * Neo.ntype({\n     *     ntype  : 'button',\n     *     iconCls: 'fa fa-home',\n     *     text   : 'Home'\n     * });\n     * @memberOf module:Neo\n     * @param {String|Object} ntype\n     * @param {Object} [config]\n     * @returns {Neo.core.Base}\n     * @see {@link module:Neo.create create}\n     */","meta":{"range":[12978,13478],"filename":"Neo.mjs","lineno":392,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100074372","name":"ntype","type":"FunctionExpression"},"vars":{"config":"module:Neo~config","ntype":"module:Neo~ntype","className":"module:Neo.ntype~className"}},"description":"Creates instances of Neo classes using their ntype instead of the class name","examples":["Neo.ntype('button' {\n    iconCls: 'fa fa-home',\n    text   : 'Home'\n});","Neo.ntype({\n    ntype  : 'button',\n    iconCls: 'fa fa-home',\n    text   : 'Home'\n});"],"memberof":"module:Neo","params":[{"type":{"names":["String","Object"]},"name":"ntype"},{"type":{"names":["Object"]},"optional":true,"name":"config"}],"returns":[{"type":{"names":["Neo.core.Base"]}}],"see":["{@link module:Neo.create create}"],"name":"ntype","longname":"module:Neo.ntype","kind":"function","scope":"static","$longname":"Neo.ntype","$kind":"method","id":2373,"neoClassName":"Neo"},{"comment":"/**\n * List of class properties which are not supposed to get mixed into other classes\n * @type {string[]}\n * @private\n */","meta":{"range":[13618,13794],"filename":"Neo.mjs","lineno":415,"columnno":6,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100074436","name":"ignoreMixin","type":"ArrayExpression","value":"[\"_name\",\"classConfigApplied\",\"className\",\"constructor\",\"isClass\",\"mixin\",\"ntype\",\"observable\",\"registerToGlobalNs\"]"}},"description":"List of class properties which are not supposed to get mixed into other classes","type":{"names":["Array.<string>"]},"access":"private","name":"ignoreMixin","longname":"module:Neo~ignoreMixin","kind":"constant","scope":"inner","memberof":"module:Neo","params":[],"$longname":"Neo~ignoreMixin","$kind":"constant","id":2374,"neoClassName":"Neo"},{"comment":"/**\n *\n * @param {Neo.core.Base} cls\n * @param {Array} mixins\n * @private\n */","meta":{"range":[13875,14832],"filename":"Neo.mjs","lineno":433,"columnno":0,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100074448","name":"applyMixins","type":"FunctionDeclaration","paramnames":["cls","mixins"]},"vars":{"mixins":"module:Neo~mixins","i":"module:Neo~applyMixins~i","len":"module:Neo~applyMixins~len","mixinClasses":"module:Neo~applyMixins~mixinClasses","mixin":"module:Neo~mixin","mixinCls":"module:Neo~mixinCls","mixinProto":"module:Neo~mixinProto","cls.prototype.mixins":"module:Neo~cls#mixins"}},"params":[{"type":{"names":["Neo.core.Base"]},"name":"cls"},{"type":{"names":["Array"]},"name":"mixins"}],"access":"private","name":"applyMixins","longname":"module:Neo~applyMixins","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~applyMixins","$kind":"method","id":2375,"neoClassName":"Neo"},{"comment":"/**\n * Creates get / set methods for class configs ending with an underscore\n * @param {Neo.core.Base} proto\n * @param {String} key\n * @private\n * @tutorial 02_ClassSystem\n */","meta":{"range":[15010,17881],"filename":"Neo.mjs","lineno":472,"columnno":0,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100074591","name":"autoGenerateGetSet","type":"FunctionDeclaration","paramnames":["proto","key"]},"vars":{"Neo[undefined]":"module:Neo~Neo.undefined]","Neo[undefined][undefined]":"module:Neo~Neo.undefined][undefined]","":null}},"description":"Creates get / set methods for class configs ending with an underscore","params":[{"type":{"names":["Neo.core.Base"]},"name":"proto"},{"type":{"names":["String"]},"name":"key"}],"access":"private","tags":[{"originalTitle":"tutorial","title":"tutorial","text":"02_ClassSystem","value":"02_ClassSystem"}],"name":"autoGenerateGetSet","longname":"module:Neo~autoGenerateGetSet","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~autoGenerateGetSet","$kind":"method","id":2376,"neoClassName":"Neo"},{"comment":"/**\n * Checks if the class name exists inside the Neo or app namespace\n * @param {String} className\n * @returns {Boolean}\n * @private\n */","meta":{"range":[18021,18224],"filename":"Neo.mjs","lineno":560,"columnno":0,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100074889","name":"exists","type":"FunctionDeclaration","paramnames":["className"]},"vars":{"":null}},"description":"Checks if the class name exists inside the Neo or app namespace","params":[{"type":{"names":["String"]},"name":"className"}],"returns":[{"type":{"names":["Boolean"]}}],"access":"private","name":"exists","longname":"module:Neo~exists","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~exists","$kind":"method","id":2377,"neoClassName":"Neo"},{"comment":"/**\n * Checks if the value of a config has changed\n * todo: we could compare objects & arrays for equality\n * @param {*} value\n * @param {*} oldValue\n * @returns {Boolean}\n * @private\n */","meta":{"range":[18414,18739],"filename":"Neo.mjs","lineno":578,"columnno":0,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100074918","name":"hasChanged","type":"FunctionDeclaration","paramnames":["value","oldValue"]}},"description":"Checks if the value of a config has changed<br />todo: we could compare objects & arrays for equality","params":[{"type":{"names":["*"]},"name":"value"},{"type":{"names":["*"]},"name":"oldValue"}],"returns":[{"type":{"names":["Boolean"]}}],"access":"private","name":"hasChanged","longname":"module:Neo~hasChanged","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~hasChanged","$kind":"method","id":2378,"neoClassName":"Neo"},{"comment":"/**\n * Checks if there is a set method for a given property key inside the prototype chain\n * @param {Neo.core.Base} proto The top level prototype of a class\n * @param {String} key the property key to test\n * @returns {Boolean}\n * @private\n */","meta":{"range":[18985,19324],"filename":"Neo.mjs","lineno":599,"columnno":0,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100074964","name":"hasPropertySetter","type":"FunctionDeclaration","paramnames":["proto","key"]},"vars":{"descriptor":"module:Neo~descriptor","proto":"module:Neo~proto"}},"description":"Checks if there is a set method for a given property key inside the prototype chain","params":[{"type":{"names":["Neo.core.Base"]},"description":"The top level prototype of a class","name":"proto"},{"type":{"names":["String"]},"description":"the property key to test","name":"key"}],"returns":[{"type":{"names":["Boolean"]}}],"access":"private","name":"hasPropertySetter","longname":"module:Neo~hasPropertySetter","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~hasPropertySetter","$kind":"method","id":2379,"neoClassName":"Neo"},{"comment":"/**\n *\n * @param {Neo.core.Base} proto\n * @param {Neo.core.Base} mixinProto\n * @returns {Function}\n * @private\n */","meta":{"range":[19441,20336],"filename":"Neo.mjs","lineno":621,"columnno":0,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100075009","name":"mixinProperty","type":"FunctionDeclaration","paramnames":["proto","mixinProto"]},"vars":{"":null}},"params":[{"type":{"names":["Neo.core.Base"]},"name":"proto"},{"type":{"names":["Neo.core.Base"]},"name":"mixinProto"}],"returns":[{"type":{"names":["function"]}}],"access":"private","name":"mixinProperty","longname":"module:Neo~mixinProperty","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~mixinProperty","$kind":"method","id":2380,"neoClassName":"Neo"},{"comment":"/**\n *\n * @param mixinCls\n * @returns {Function}\n * @private\n */","meta":{"range":[20403,20571],"filename":"Neo.mjs","lineno":655,"columnno":0,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src","code":{"id":"astnode100075124","name":"mixReduce","type":"FunctionDeclaration","paramnames":["mixinCls"]},"vars":{"":null}},"params":[{"name":"mixinCls"}],"returns":[{"type":{"names":["function"]}}],"access":"private","name":"mixReduce","longname":"module:Neo~mixReduce","kind":"function","scope":"inner","memberof":"module:Neo","$longname":"Neo~mixReduce","$kind":"method","id":2381,"neoClassName":"Neo"}]}
// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "github.com/pavelkozlov/realworld/internal/user"
)

// MockTransport is a mock of Transport interface.
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
}

// MockTransportMockRecorder is the mock recorder for MockTransport.
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance.
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// Authentication mocks base method.
func (m *MockTransport) Authentication(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Authentication", w, r)
}

// Authentication indicates an expected call of Authentication.
func (mr *MockTransportMockRecorder) Authentication(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentication", reflect.TypeOf((*MockTransport)(nil).Authentication), w, r)
}

// FollowUser mocks base method.
func (m *MockTransport) FollowUser(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FollowUser", w, r)
}

// FollowUser indicates an expected call of FollowUser.
func (mr *MockTransportMockRecorder) FollowUser(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowUser", reflect.TypeOf((*MockTransport)(nil).FollowUser), w, r)
}

// GetCurrentUser mocks base method.
func (m *MockTransport) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetCurrentUser", w, r)
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockTransportMockRecorder) GetCurrentUser(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockTransport)(nil).GetCurrentUser), w, r)
}

// GetProfile mocks base method.
func (m *MockTransport) GetProfile(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProfile", w, r)
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockTransportMockRecorder) GetProfile(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockTransport)(nil).GetProfile), w, r)
}

// Registration mocks base method.
func (m *MockTransport) Registration(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Registration", w, r)
}

// Registration indicates an expected call of Registration.
func (mr *MockTransportMockRecorder) Registration(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockTransport)(nil).Registration), w, r)
}

// UnfollowUser mocks base method.
func (m *MockTransport) UnfollowUser(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnfollowUser", w, r)
}

// UnfollowUser indicates an expected call of UnfollowUser.
func (mr *MockTransportMockRecorder) UnfollowUser(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfollowUser", reflect.TypeOf((*MockTransport)(nil).UnfollowUser), w, r)
}

// UpdateUser mocks base method.
func (m *MockTransport) UpdateUser(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUser", w, r)
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockTransportMockRecorder) UpdateUser(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockTransport)(nil).UpdateUser), w, r)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Authentication mocks base method.
func (m *MockService) Authentication(request user.AuthenticationRequest) (user.AuthenticationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authentication", request)
	ret0, _ := ret[0].(user.AuthenticationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authentication indicates an expected call of Authentication.
func (mr *MockServiceMockRecorder) Authentication(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentication", reflect.TypeOf((*MockService)(nil).Authentication), request)
}

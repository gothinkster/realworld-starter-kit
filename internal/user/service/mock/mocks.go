// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/pavelkozlov/realworld/internal/entity"
	jwt "github.com/pavelkozlov/realworld/internal/user/service/jwt"
)

// MockuserRepo is a mock of userRepo interface.
type MockuserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepoMockRecorder
}

// MockuserRepoMockRecorder is the mock recorder for MockuserRepo.
type MockuserRepoMockRecorder struct {
	mock *MockuserRepo
}

// NewMockuserRepo creates a new mock instance.
func NewMockuserRepo(ctrl *gomock.Controller) *MockuserRepo {
	mock := &MockuserRepo{ctrl: ctrl}
	mock.recorder = &MockuserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepo) EXPECT() *MockuserRepoMockRecorder {
	return m.recorder
}

// FindUserByEmail mocks base method.
func (m *MockuserRepo) FindUserByEmail(ctx context.Context, email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", ctx, email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockuserRepoMockRecorder) FindUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockuserRepo)(nil).FindUserByEmail), ctx, email)
}

// Mockhasher is a mock of hasher interface.
type Mockhasher struct {
	ctrl     *gomock.Controller
	recorder *MockhasherMockRecorder
}

// MockhasherMockRecorder is the mock recorder for Mockhasher.
type MockhasherMockRecorder struct {
	mock *Mockhasher
}

// NewMockhasher creates a new mock instance.
func NewMockhasher(ctrl *gomock.Controller) *Mockhasher {
	mock := &Mockhasher{ctrl: ctrl}
	mock.recorder = &MockhasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockhasher) EXPECT() *MockhasherMockRecorder {
	return m.recorder
}

// CreateHashFromPassword mocks base method.
func (m *Mockhasher) CreateHashFromPassword(password string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHashFromPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateHashFromPassword indicates an expected call of CreateHashFromPassword.
func (mr *MockhasherMockRecorder) CreateHashFromPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHashFromPassword", reflect.TypeOf((*Mockhasher)(nil).CreateHashFromPassword), password)
}

// CreateHashFromPasswordAndSalt mocks base method.
func (m *Mockhasher) CreateHashFromPasswordAndSalt(password, salt string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHashFromPasswordAndSalt", password, salt)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateHashFromPasswordAndSalt indicates an expected call of CreateHashFromPasswordAndSalt.
func (mr *MockhasherMockRecorder) CreateHashFromPasswordAndSalt(password, salt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHashFromPasswordAndSalt", reflect.TypeOf((*Mockhasher)(nil).CreateHashFromPasswordAndSalt), password, salt)
}

// MockjsonWebToken is a mock of jsonWebToken interface.
type MockjsonWebToken struct {
	ctrl     *gomock.Controller
	recorder *MockjsonWebTokenMockRecorder
}

// MockjsonWebTokenMockRecorder is the mock recorder for MockjsonWebToken.
type MockjsonWebTokenMockRecorder struct {
	mock *MockjsonWebToken
}

// NewMockjsonWebToken creates a new mock instance.
func NewMockjsonWebToken(ctrl *gomock.Controller) *MockjsonWebToken {
	mock := &MockjsonWebToken{ctrl: ctrl}
	mock.recorder = &MockjsonWebTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockjsonWebToken) EXPECT() *MockjsonWebTokenMockRecorder {
	return m.recorder
}

// CreateJWT mocks base method.
func (m *MockjsonWebToken) CreateJWT(incomeClaims jwt.Claims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWT", incomeClaims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJWT indicates an expected call of CreateJWT.
func (mr *MockjsonWebTokenMockRecorder) CreateJWT(incomeClaims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWT", reflect.TypeOf((*MockjsonWebToken)(nil).CreateJWT), incomeClaims)
}

// ParseJWT mocks base method.
func (m *MockjsonWebToken) ParseJWT(tokenString string) (jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWT", tokenString)
	ret0, _ := ret[0].(jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWT indicates an expected call of ParseJWT.
func (mr *MockjsonWebTokenMockRecorder) ParseJWT(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWT", reflect.TypeOf((*MockjsonWebToken)(nil).ParseJWT), tokenString)
}

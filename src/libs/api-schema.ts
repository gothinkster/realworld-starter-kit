/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/users/login": {
    /** Login for existing user */
    post: operations["Login"];
  };
  "/users": {
    /** Register a new user */
    post: operations["CreateUser"];
  };
  "/user": {
    /** Gets the currently logged-in user */
    get: operations["GetCurrentUser"];
    /** Updated user information for current user */
    put: operations["UpdateCurrentUser"];
  };
  "/profiles/{username}": {
    /** Get a profile of a user of the system. Auth is optional */
    get: operations["GetProfileByUsername"];
  };
  "/profiles/{username}/follow": {
    /** Follow a user by username */
    post: operations["FollowUserByUsername"];
    /** Unfollow a user by username */
    delete: operations["UnfollowUserByUsername"];
  };
  "/articles/feed": {
    /** Get most recent articles from users you follow. Use query parameters to limit. Auth is required */
    get: operations["GetArticlesFeed"];
  };
  "/articles": {
    /** Get most recent articles globally. Use query parameters to filter results. Auth is optional */
    get: operations["GetArticles"];
    /** Create an article. Auth is required */
    post: operations["CreateArticle"];
  };
  "/articles/{slug}": {
    /** Get an article. Auth not required */
    get: operations["GetArticle"];
    /** Update an article. Auth is required */
    put: operations["UpdateArticle"];
    /** Delete an article. Auth is required */
    delete: operations["DeleteArticle"];
  };
  "/articles/{slug}/comments": {
    /** Get the comments for an article. Auth is optional */
    get: operations["GetArticleComments"];
    /** Create a comment for an article. Auth is required */
    post: operations["CreateArticleComment"];
  };
  "/articles/{slug}/comments/{id}": {
    /** Delete a comment for an article. Auth is required */
    delete: operations["DeleteArticleComment"];
  };
  "/articles/{slug}/favorite": {
    /** Favorite an article. Auth is required */
    post: operations["CreateArticleFavorite"];
    /** Unfavorite an article. Auth is required */
    delete: operations["DeleteArticleFavorite"];
  };
  "/tags": {
    /** Get tags. Auth not required */
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["TagsResponse"];
          };
        };
        /** Unexpected error */
        422: {
          content: {
            "application/json": components["schemas"]["GenericErrorModel"];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    LoginUser: {
      email: string;
      /** Format: password */
      password: string;
    };
    LoginUserRequest: {
      user: components["schemas"]["LoginUser"];
    };
    NewUser: {
      username: string;
      email: string;
      /** Format: password */
      password: string;
    };
    NewUserRequest: {
      user: components["schemas"]["NewUser"];
    };
    User: {
      email: string;
      token: string;
      username: string;
      bio: string;
      image: string;
    };
    UserResponse: {
      user: components["schemas"]["User"];
    };
    UpdateUser: {
      email?: string;
      token?: string;
      username?: string;
      bio?: string;
      image?: string;
    };
    UpdateUserRequest: {
      user: components["schemas"]["UpdateUser"];
    };
    ProfileResponse: {
      profile: components["schemas"]["Profile"];
    };
    Profile: {
      username: string;
      bio: string;
      image: string;
      following: boolean;
    };
    Article: {
      slug: string;
      title: string;
      description: string;
      body: string;
      tagList: string[];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      favorited: boolean;
      favoritesCount: number;
      author: components["schemas"]["Profile"];
    };
    SingleArticleResponse: {
      article: components["schemas"]["Article"];
    };
    MultipleArticlesResponse: {
      articles: components["schemas"]["Article"][];
      articlesCount: number;
    };
    NewArticle: {
      title: string;
      description: string;
      body: string;
      tagList?: string[];
    };
    NewArticleRequest: {
      article: components["schemas"]["NewArticle"];
    };
    UpdateArticle: {
      title?: string;
      description?: string;
      body?: string;
    };
    UpdateArticleRequest: {
      article: components["schemas"]["UpdateArticle"];
    };
    Comment: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      body: string;
      author: components["schemas"]["Profile"];
    };
    SingleCommentResponse: {
      comment: components["schemas"]["Comment"];
    };
    MultipleCommentsResponse: {
      comments: components["schemas"]["Comment"][];
    };
    NewComment: {
      body: string;
    };
    NewCommentRequest: {
      comment: components["schemas"]["NewComment"];
    };
    TagsResponse: {
      tags: string[];
    };
    GenericErrorModel: {
      errors: {
        body: string[];
      };
    };
  };
}

export interface operations {
  /** Login for existing user */
  Login: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
    /** Credentials to use */
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginUserRequest"];
      };
    };
  };
  /** Register a new user */
  CreateUser: {
    responses: {
      /** OK */
      201: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
    /** Details of the new user to register */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewUserRequest"];
      };
    };
  };
  /** Gets the currently logged-in user */
  GetCurrentUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
  };
  /** Updated user information for current user */
  UpdateCurrentUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
    /** User details to update. At least **one** field is required. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRequest"];
      };
    };
  };
  /** Get a profile of a user of the system. Auth is optional */
  GetProfileByUsername: {
    parameters: {
      path: {
        /** Username of the profile to get */
        username: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProfileResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
  };
  /** Follow a user by username */
  FollowUserByUsername: {
    parameters: {
      path: {
        /** Username of the profile you want to follow */
        username: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProfileResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
  };
  /** Unfollow a user by username */
  UnfollowUserByUsername: {
    parameters: {
      path: {
        /** Username of the profile you want to unfollow */
        username: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProfileResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
  };
  /** Get most recent articles from users you follow. Use query parameters to limit. Auth is required */
  GetArticlesFeed: {
    parameters: {
      query: {
        /** Limit number of articles returned (default is 20) */
        limit?: number;
        /** Offset/skip number of articles (default is 0) */
        offset?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MultipleArticlesResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
  };
  /** Get most recent articles globally. Use query parameters to filter results. Auth is optional */
  GetArticles: {
    parameters: {
      query: {
        /** Filter by tag */
        tag?: string;
        /** Filter by author (username) */
        author?: string;
        /** Filter by favorites of a user (username) */
        favorited?: string;
        /** Limit number of articles returned (default is 20) */
        limit?: number;
        /** Offset/skip number of articles (default is 0) */
        offset?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MultipleArticlesResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
  };
  /** Create an article. Auth is required */
  CreateArticle: {
    responses: {
      /** OK */
      201: {
        content: {
          "application/json": components["schemas"]["SingleArticleResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
    /** Article to create */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewArticleRequest"];
      };
    };
  };
  /** Get an article. Auth not required */
  GetArticle: {
    parameters: {
      path: {
        /** Slug of the article to get */
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SingleArticleResponse"];
        };
      };
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
  };
  /** Update an article. Auth is required */
  UpdateArticle: {
    parameters: {
      path: {
        /** Slug of the article to update */
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SingleArticleResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
    /** Article to update */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateArticleRequest"];
      };
    };
  };
  /** Delete an article. Auth is required */
  DeleteArticle: {
    parameters: {
      path: {
        /** Slug of the article to delete */
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
  };
  /** Get the comments for an article. Auth is optional */
  GetArticleComments: {
    parameters: {
      path: {
        /** Slug of the article that you want to get comments for */
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MultipleCommentsResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
  };
  /** Create a comment for an article. Auth is required */
  CreateArticleComment: {
    parameters: {
      path: {
        /** Slug of the article that you want to create a comment for */
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SingleCommentResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
    /** Comment you want to create */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewCommentRequest"];
      };
    };
  };
  /** Delete a comment for an article. Auth is required */
  DeleteArticleComment: {
    parameters: {
      path: {
        /** Slug of the article that you want to delete a comment for */
        slug: string;
        /** ID of the comment you want to delete */
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
  };
  /** Favorite an article. Auth is required */
  CreateArticleFavorite: {
    parameters: {
      path: {
        /** Slug of the article that you want to favorite */
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SingleArticleResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
  };
  /** Unfavorite an article. Auth is required */
  DeleteArticleFavorite: {
    parameters: {
      path: {
        /** Slug of the article that you want to unfavorite */
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SingleArticleResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Unexpected error */
      422: {
        content: {
          "application/json": components["schemas"]["GenericErrorModel"];
        };
      };
    };
  };
}

export interface external {}
